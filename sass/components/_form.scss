.form {
    &__group:not(:last-child) {
        margin-bottom: 2rem;
    }

    &__input {
        font-size: 1.5rem;
        font-family: inherit;
        color: inherit;
        padding: 1.5rem 2rem;
        border-radius: 2px;
        background-color: rgba($color-white,.5);
        border: none;
        border-bottom: 3px solid transparent;
        //colocando la linea transparente evitamos que al agregarla se desplacen los elementos que estan debajo al insertar los 3px de la linea ya que ese espacio esta desde el principio
        width: 90%;
        display: block;
        transition: all .3s;

        @include respond(tab-port){
            width: 100%;
        }

        &:focus {
            outline: none;
            box-shadow: 0 1rem 2rem rgba($color-black, .1);
            border-bottom: 3px solid $color-primary;
        }

        //estas pseudo clases (son 2 a la vez) funcionan sobre los elementos activos cuando la validacion del navegador es invalida, por ejemplo, cuando un mail no tiene formato de mail o cuando el campo esta vacio
        &:focus:invalid {
            border-bottom: 3px solid $color-secondary-dark;
        }

        //este pseudo elemento es nuevo y por ahora solo funciona en safari y chrome
        &::-webkit-input-placeholder {
            color: $color-grey-dark-2;
        }
    }


    &__label {
        font-size: 1.2rem;
        font-weight: 700;
        margin-left: 2rem;
        margin-top: .7rem;
        display: block;
        transition: all .3s;

    }

    //en este caso se usa una extension para el selector, para seleccionar elementos hermanos del mismo padre, si estan inmediatamente uno abajo del otro se usa el + si estan alejados se usa ~   el orden de los elementos en el selector deben estar escritos en el mismo orden que en el html
    //con esta pseudo clase lo que estamos haciendo es escondiendo y mostrando el label y el placeholder segun si esta activo o no el input
    &__input:placeholder-shown + &__label {
        opacity: 0;
        visibility: hidden;
        transform: translateY(-4rem);
    }

    &__radio-group {
        width: 49%;
        display: inline-block;

        @include respond(tab-port){
            width: 100%;
            margin-bottom: 2rem;
        }
    }

    //lo ocultamos ya que creamos otros elementos que hemos estilizado para hacer la funcion del radio button
    &__radio-input {
        display: none;
    }

    &__radio-label {
        font-size: $default-font-size;
        cursor: pointer;
        position: relative;
        padding-left: 4.5rem;
    }

    &__radio-button {
        height: 3rem;
        width: 3rem;
        border: 5px solid $color-primary;
        border-radius: 50%;
        display: inline-block;
        position: absolute;
        left: 0;
        top: -.4rem;

        //los radio no se pueden estilizar por ello lo que hacemos es ocultarlo y crear un elemento que funcione de la misma manera con un estilo personalizado
        //lo mismo se puede hacer con los checklist
        &::after {
            content: "";
            display: block;
            height: 1.3rem;
            width: 1.3rem;
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: $color-primary;
            opacity: 0;
            transition: opacity .2s;
        }
    }

    //estamos seleccionando la clase input CHEQUEADA(RADIO SELECCIONADO) y luego el label y dentro del label la pseudo clase after
    &__radio-input:checked ~ &__radio-label &__radio-button::after {
        opacity: 1;
    }
}